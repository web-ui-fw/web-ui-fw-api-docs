<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="../entries2html.xsl" ?>
<entry name="tokentextarea2" namespace="fn" type="widget" widgetnamespace="mobile" event-prefix="tokentextarea2">
	<title>Tokentextarea2 Widget</title>
	<desc>Creates a <placeholder name="name"/></desc>
	<longdesc>
		<h2 id="introduction">Token Text Area 2</h2>
		<p>This widget changes a text item to a button. It can be comprised of a number of button widgets. As the user types text, the widget parses the text at each keystroke and creates a button when the user types a character that acts as a delimiter (<code>;</code> or <code>,</code>). A user can add the <placeholder name="name"/> widget to a contact list, email list, or another list. The typical use of this widget is composing a number of contacts or phone numbers in a specific area of the screen.</p>

		<h2 id="structure">Structure</h2>
		<p>The widget derives from the jQuery Mobile <a href="//api.jquerymobile.com/textinput">textinput</a> widget and works on an <code>input</code> of type text. Buttons are created from its initial value upon instantiation and if any text is left over it is set as the value of the input. To create a <placeholder name="name"/> widget, add an <code>input</code> element to your markup:</p>
<pre><code><![CDATA[
<input type="text" id="email-addresses" data-role="tokentextarea2">
]]></code></pre>

		<h2 id="keyboard">Keyboard interaction</h2>
		<p>The user may type freely into the input. Whenever she types a delimiter character, the text is tokenized the same way as initially, resulting in new buttons being inserted immediately preceding the input.</p>
		<p>When the user types Backspace the button nearest the input will be selected in preparation for removal under the following circumstances:
				<ul>
					<li>There is at least one button before the input.</li>
					<li>Pressing Backspace has not resulted in a change in the input's value. That is, the value of the input is equal to the copy maintained in the visibility-hidden span used for calculating the width of the input (see <a href="#layout">below</a>).</li>
				</ul>
		</p>

		<h2 id="layout">Layout and styling</h2>
		<p>The buttons are placed side-by-side. They wrap to the next line. The input is placed after the last button and sized such that it fills up the rest of the line. As the user types, the widget ensures that the input has sufficient width for accommodating the text typed. It measures the width of the text by maintaining a copy of the input's value in a visibility-hidden span. If the width of the text exceeds the width of the input, the input width is restored to the textinput widget's default of 100%, causing it to wrap to the next line. The widget is styled with a text cursor, making it appear as a large input. Clicking anywhere inside the widget except on one of the buttons will cause the input to receive focus. This further establishes the widget's appearance of being a large input.</p>

		<h2 id="button-interaction">Interacting with the buttons</h2>
		<p>In addition to being able to remove buttons by pressing Backspace, the user can also click on them. The first click on a button will select it, while the second click will remove it. It is possible to prevent selection of a button by attaching a handler to the widget's <a href="#event-select">select</a> event and preventing default on the event object.</p>
		<p>Whenever the user types, all buttons are deselected. The deselection is performed only after making sure that the selected button immediately preceding the input is removed in response to a Backspace keypress that does not modify the value of the input (as described above).</p>

  	</longdesc>

	<added>***??????***</added>
	<options>
		<xi:include href="../includes/widget-option-disabled.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
		<xi:include href="../includes/widget-option-enhanced.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
	</options>
	<events>
		<xi:include href="../includes/widget-event-create.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
		<event name="select">
			<desc>Triggered when a button is selected. Preventing default will prevent selection of the button.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="value" type="string">
					<desc>The value associated with the button.</desc>
				</property>
			</argument>
		</event>
	</events>
	<methods>
		<method name="add">
			<signature example-params='"my.name@example.com"'>
				<desc>Insert a new button with the specified value immediately before the input.</desc>
				<argument name="value" type="String"/>
			</signature>
			<signature example-params='"my.name@example.com", 12'>
				<desc>Insert a new button with the specified value at the specified zero-based index among the existing tokens. The button at that index and all buttons following it will move up by one. If the index specified is out of bounds, the button will be inserted immediately before the input.</desc>
				<argument name="value" type="String"/>
				<argument name="index" type="Number"/>
			</signature>
		</method>
		<xi:include href="../includes/widget-method-destroy.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/>
		<method name="inputText">
			<signature return="String">
				<desc>Gets the string from the widget. The string consists of the <code>;</code>-separated list of button values, followed by the value of the input.</desc>
			</signature>
			<signature example-params='"my.name@example.com; your.name@"'>
				<desc>Sets the value of the widget. All existing buttons are removed, the argument is tokenized, new buttons are created, and the leftover string is set as the input's value.</desc>
				<argument name="text" type="String">
					<desc>The new value the widget is to have.</desc>
				</argument>
			</signature>
		</method>
		<method name="length" return="Number">
			<desc>Returns the number of the tokens.</desc>
		</method>
		<method name="remove">
			<signature>
				<desc>Removes all tokens.</desc>
			</signature>
			<signature example-params="12">
				<desc>Remove the button at the specified index.</desc>
				<argument name="index" type="Number"/>
			</signature>
		</method>
		<method name="select">
			<signature return="String">
				<desc>The values of the selected buttons are returned <code>;</code>-separated in a string.</desc>
			</signature>
			<signature return="Null">
				<desc>If no buttons are selected, <code>null</code> is returned.</desc>
			</signature>
			<signature example-params="12">
				<argument name="index" type="Number"/>
				<desc>Unconditionally selects the button at the zero-based index passed as the parameter. The <a href="#event-select">select</a> event is not triggered.</desc>
			</signature>
		</method>
	</methods>
	<example>
		<desc>A basic example of a page with a <placeholder name="name"/>.</desc>
		<html><![CDATA[
	<div data-role="page">
		<div data-role="header">
			<h1>Web UI Framework Example</h1>
		</div>
		<div class="ui-content">
			<form>
				<input data-role="tokentextarea2">
			</form>
		</div>
	</div>
]]></html>
	</example>
	<category slug="widgets"/>
</entry>
